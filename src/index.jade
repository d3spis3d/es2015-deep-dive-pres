doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title ES2015 Deep Dive

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 ES2015 & ES2016
        h1.bullet Deep Dive
        ul
          li a.k.a ES6 & ES7

      section
        h1.bullet Topics
        ul.bigger-list
          li New ES2015 Language Features
          li Coming ES2016 Language Features
          li Using these features with Babel
          li Exciting stuff to look forward to?

      section
        h1.bullet ES?
        ul.bigger-list
          li EcmaScript
          li JavaScript is an implementation of ES
          li ES5 in 2009 -> ES2015 in June 2015
          li New spec every year

      section
        h1.bullet ES Stages
        ul.bigger-list
          li Stage 0: just an idea
          li Stage 1: formal proposal
          li Stage 2: draft spec
          li Stage 3: candidate spec
          li Stage 4: finished spec, two implementations

      section
        h1 Babel.js
        h3.bullet Babel is built on plugins, different plugins for each feature
        ul.bigger-list
          li Features can be enabled by stage
          li Or selected language features individually

      section
        h1 ES2015 Features
        ul
          li
            p arrow functions, classes, enhanced object literals, template strings, destructuring, default args, rest, spread, let, const, iterators, generators, modules, Map, Set, proxies, symbols, Promises, reflect API, tail calls

      section(data-bespoke-hash="let")
        h1 Let
        h3.bullet How does #[span.token.keyword var]'s scoping work?
        ul
          li #[span.token.keyword var] is function scoped
          li Variable declarations with #[span.token.keyword var] are hoisted by the JS engine

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              a = 2;
              var a;
              console.log(a);
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              var a;
              a = 2;
              console.log(a); // 2
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              if (false) {
                var a = 2;
              }
              console.log(a); // Reference error?
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              var a;
              if (false) {
                a = 2;
              }
              console.log(a); // undefined
            }

      section
        h1 Let
        h3.bullet #[span.token.keyword var] is function scoped
        ul
          li
            h3 #[span.token.keyword let] is block scoped
          li
            h3 A block is any pair of { }

      section
        h1 Let
        pre
          code.language-javascript.
            function() {
              let a = 2;
              {
                let a = 3;
                console.log(a); // 3
              }
              console.log(a); // 2
            }

      section
        h1 Let - Why?
        h3.bullet Principle of Least Privilege
        ul
          li
            h3 If a variable is not used outside of a block of code, don't expose it

      section
        h1 Let - Gotchas
        ul.bullet
          li
            h3 #[span.token.keyword let] is not hoisted like #[span.token.keyword var]
          li
            h3 Because of the way Babel transpiles let, let is hoisted when using Babel

      section
        h1 Let - Babel

      section(data-bespoke-hash="const")
        h1 Const
        h3.bullet Declares a variable as a constant
        ul
          li
            h3 Block scoped same as #[span.token.keyword let]
          li
            h3 Can't share its name with variable or function in the same scope

      section
        h1 Const
        pre
          code.language-javascript.
            const VAL = 12345;
            const STR = "a constant string";
            const VALUES = [1, 2, 3, 4];
            const MY_OBJECT = {
              key1: 'value'
            };

      section
        h1 Const - Gotchas
        h3.bullet Reassigning will fail silently in some browsers
        ul
          li
            h3 Important to use static analysis tools, e.g. ESLint
          li
            h3 #[span.token.keyword const] is not reassignable, but it is mutable

      section
        h1 Const - Mutable
        pre
          code.language-javascript.
            const MY_OBJECT = {
              key1: 'value';
            }
            // Change key values
            MY_OBJECT.key1 = 'otherValue';
            //Add new keys
            MY_OBJECT.key2 = 'value';

      section(data-bespoke-hash="short-obj")
        h2 Shorthand object syntax
        pre
          code.language-javascript.
            let obj = {
              // shorthand for attr: attr,
              attr,
              // shorthand for method: function() {...}
              method() {
                return 42;
              }
            };

      section(data-bespoke-hash="templ-str")
        h1 Template Strings
        h3.bullet New string syntax using #[span.token.keyword ``]
        ul
          li
            h3 Gives us:
          li
            h3 String interpolation
          li
            h3 Easy multiline strings

      section
        h1 String interpolation
        h3 Available in many other languages, Python, Perl, Ruby
        pre
          code.language-javascript.
            let name = 'Dan'; let age = '27';
            let string = `Hi Im ${name}, and Im ${age} years old`;

      section
        h1 Multiline strings
        pre
          code.language-javascript.
            let str = `This is a
            multiline string`;


      section(data-bespoke-hash="def-args")
        h1 Default Arguments
        h3.bullet Specify default values for function arguments
        ul
          li
            h3 Used when no argument is passed in
          li
            h3 Or when the argument is undefined

      section
        h1 Default Arguments
        pre
          code.language-javascript.
            function add(x=0, y=0) {
              return x + y;
            }
            add(1); // 1
            add(undefined, 1); // 1

      section
        h1 Default Arguments
        pre
          code.language-javascript.
            let variable;
            //  ...
            // variable may or may not be initialised
            add(variable, 10);

      section(data-bespoke-hash="destruct")
        h1 Destructuring

      section(data-bespoke-hash="spread")
        h1 Spread

      section(data-bespoke-hash="rest")
        h1 Rest

      section(data-bespoke-hash="arrow")
        h1 Arrow functions

      section(data-bespoke-hash="modules")
        h1 Modules

      section(data-bespoke-hash="class")
        h1 Class




    script(src='build/build.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/ace.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/mode-javascript.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/theme-tomorrow.js')
