doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title ES2015 Deep Dive

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 ES2015 & ES2016
        h1.bullet Deep Dive
        ul
          li a.k.a ES6 & ES7

      section
        h1.bullet Topics
        ul.bigger-list
          li New ES2015 Language Features
          li Coming ES2016 Language Features
          li Using these features with Babel
          li Exciting stuff to look forward to?

      section
        h1.bullet ES?
        ul.bigger-list
          li EcmaScript
          li JavaScript is an implementation of ES
          li ES5 in 2009 -> ES2015 in June 2015
          li New spec every year

      section
        h1.bullet ES Stages
        ul.bigger-list
          li Stage 0: just an idea
          li Stage 1: formal proposal
          li Stage 2: draft spec
          li Stage 3: candidate spec
          li Stage 4: finished spec, two implementations

      section
        h1 Babel.js
        h3.bullet Babel is built on plugins, different plugins for each feature
        ul.bigger-list
          li Babel 5 - All ES2015 and stage 4 enabled by default
          li Babel 6 - Nothing by default
          li Features can be enabled by stage
          li Or selected language features individually

      section
        h1 ES2015 Features
        ul
          li
            p arrow functions, classes, enhanced object literals, template strings, destructuring, default args, rest, spread, let, const, iterators, generators, modules, Map, Set, proxies, symbols, Promises, reflect API, tail calls

      section
        h1 Let
        h3.bullet How does #[span.token.keyword var]'s scoping work?
        ul
          li #[span.token.keyword var] is function scoped

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              a = 2;
              var a;
              console.log(a);
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              var a;
              a = 2;
              console.log(a); // 2
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              if (false) {
                var a = 2;
              }
              console.log(a); // Reference error?
            }

      section
        h1 Var
        pre
          code.language-javascript.
            function() {
              var a;
              if (false) {
                a = 2;
              }
              console.log(a); // undefined
            }

      section
        h1 Let
        ul.bullet
          li #[span.token.keyword var] is function scoped
          li #[span.token.keyword let] is block scoped
          li A block is any pair of { }

      section
        h1 Let
        pre
          code.language-javascript.
            function() {
              let a = 2;
              {
                let a = 3;
                console.log(a); // 3
              }
              console.log(a); // 2
            }

      section
        h1 Let - Why?
        ul.bullet
          li Principle of Least Privilege
          li If a variable is not used outside of a block of code, don't expose it

      section
        h1 Let - Gotchas
        ul.bullet
          li Let is not hoisted like var
          li Because of the way Babel transpiles let, let is hoisted when using Babel

      section
        h1 Let - Babel




    script(src='build/build.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/ace.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/mode-javascript.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.2/theme-tomorrow.js')
